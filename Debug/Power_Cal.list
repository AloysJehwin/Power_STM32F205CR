
Power_Cal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e30  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001fb4  08001fb4  00011fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fcc  08001fcc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001fcc  08001fcc  00011fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fd4  08001fd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fd4  08001fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fd8  08001fd8  00011fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08001fe8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08001fe8  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b618  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001870  00000000  00000000  0002b690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002cf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000903  00000000  00000000  0002da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cf71  00000000  00000000  0002e37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc35  00000000  00000000  0004b2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3ebb  00000000  00000000  00057f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030c0  00000000  00000000  0010bddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0010ee9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08001f9c 	.word	0x08001f9c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08001f9c 	.word	0x08001f9c

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f9e2 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f809 	bl	80004e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8c0 	bl	8000654 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004d4:	f000 f840 	bl	8000558 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004d8:	f000 f844 	bl	8000564 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f890 	bl	8000600 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x1c>

080004e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b092      	sub	sp, #72	; 0x48
 80004e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e8:	f107 0318 	add.w	r3, r7, #24
 80004ec:	2230      	movs	r2, #48	; 0x30
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 fd27 	bl	8001f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000504:	2302      	movs	r3, #2
 8000506:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050c:	2310      	movs	r3, #16
 800050e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000510:	2300      	movs	r3, #0
 8000512:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000514:	f107 0318 	add.w	r3, r7, #24
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fcc1 	bl	8000ea0 <HAL_RCC_OscConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000524:	f000 f8ca 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000528:	230f      	movs	r3, #15
 800052a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f000 ff01 	bl	8001348 <HAL_RCC_ClockConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800054c:	f000 f8b6 	bl	80006bc <Error_Handler>
  }
}
 8000550:	bf00      	nop
 8000552:	3748      	adds	r7, #72	; 0x48
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_Init 1 */
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000582:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <MX_TIM2_Init+0x98>)
 8000584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000588:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <MX_TIM2_Init+0x98>)
 800058c:	2200      	movs	r2, #0
 800058e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <MX_TIM2_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <MX_TIM2_Init+0x98>)
 8000598:	f04f 32ff 	mov.w	r2, #4294967295
 800059c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <MX_TIM2_Init+0x98>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <MX_TIM2_Init+0x98>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005aa:	4814      	ldr	r0, [pc, #80]	; (80005fc <MX_TIM2_Init+0x98>)
 80005ac:	f001 f8cc 	bl	8001748 <HAL_TIM_Base_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005b6:	f000 f881 	bl	80006bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80005ba:	2306      	movs	r3, #6
 80005bc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <MX_TIM2_Init+0x98>)
 80005ca:	f001 f90c 	bl	80017e6 <HAL_TIM_SlaveConfigSynchro>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80005d4:	f000 f872 	bl	80006bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_TIM2_Init+0x98>)
 80005e6:	f001 faf9 	bl	8001bdc <HAL_TIMEx_MasterConfigSynchronization>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80005f0:	f000 f864 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000028 	.word	0x20000028

08000600 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_USART2_UART_Init+0x4c>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_USART2_UART_Init+0x50>)
 8000608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_USART2_UART_Init+0x4c>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_USART2_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART2_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_USART2_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART2_UART_Init+0x4c>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_USART2_UART_Init+0x4c>)
 800062c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000630:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_USART2_UART_Init+0x4c>)
 800063a:	f001 fb49 	bl	8001cd0 <HAL_UART_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000644:	f000 f83a 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000070 	.word	0x20000070
 8000650:	40004400 	.word	0x40004400

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_GPIO_Init+0x60>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <MX_GPIO_Init+0x60>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_GPIO_Init+0x60>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 800068a:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_GPIO_Init+0x64>)
 800068c:	f000 fbf0 	bl	8000e70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000690:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8000694:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_GPIO_Init+0x64>)
 80006a8:	f000 fa44 	bl	8000b34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020000 	.word	0x40020000

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x48>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_MspInit+0x48>)
 80006d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x48>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_MspInit+0x48>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_MspInit+0x48>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_MspInit+0x48>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40023800 	.word	0x40023800

08000714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000724:	d10d      	bne.n	8000742 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_TIM_Base_MspInit+0x38>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_TIM_Base_MspInit+0x38>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6413      	str	r3, [r2, #64]	; 0x40
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_TIM_Base_MspInit+0x38>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	40023800 	.word	0x40023800

08000750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <HAL_UART_MspInit+0x84>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d12b      	bne.n	80007ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_UART_MspInit+0x88>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <HAL_UART_MspInit+0x88>)
 800077c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_UART_MspInit+0x88>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_UART_MspInit+0x88>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <HAL_UART_MspInit+0x88>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <HAL_UART_MspInit+0x88>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007aa:	230f      	movs	r3, #15
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ba:	2307      	movs	r3, #7
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <HAL_UART_MspInit+0x8c>)
 80007c6:	f000 f9b5 	bl	8000b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40004400 	.word	0x40004400
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler+0x4>

080007f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler+0x4>

080007fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000826:	f000 f885 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}

0800082e <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
	...

0800083c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000874 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000840:	f7ff fff5 	bl	800082e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	; (800087c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	; (8000888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800086a:	f001 fb73 	bl	8001f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086e:	f7ff fe29 	bl	80004c4 <main>
  bx  lr    
 8000872:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000880:	08001fdc 	.word	0x08001fdc
  ldr r2, =_sbss
 8000884:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000888:	200000bc 	.word	0x200000bc

0800088c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC_IRQHandler>
	...

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <HAL_Init+0x40>)
 800089a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800089e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_Init+0x40>)
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_Init+0x40>)
 80008b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f907 	bl	8000acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff ff00 	bl	80006c8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023c00 	.word	0x40023c00

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f911 	bl	8000b1a <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f8e7 	bl	8000ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x1c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x20>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a03      	ldr	r2, [pc, #12]	; (8000954 <HAL_IncTick+0x20>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000008 	.word	0x20000008
 8000954:	200000b8 	.word	0x200000b8

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b02      	ldr	r3, [pc, #8]	; (8000968 <HAL_GetTick+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	200000b8 	.word	0x200000b8

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	db0a      	blt.n	80009fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	490c      	ldr	r1, [pc, #48]	; (8000a1c <__NVIC_SetPriority+0x4c>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	0112      	lsls	r2, r2, #4
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	440b      	add	r3, r1
 80009f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f8:	e00a      	b.n	8000a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4908      	ldr	r1, [pc, #32]	; (8000a20 <__NVIC_SetPriority+0x50>)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	3b04      	subs	r3, #4
 8000a08:	0112      	lsls	r2, r2, #4
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	761a      	strb	r2, [r3, #24]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b089      	sub	sp, #36	; 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	f1c3 0307 	rsb	r3, r3, #7
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	bf28      	it	cs
 8000a42:	2304      	movcs	r3, #4
 8000a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d902      	bls.n	8000a54 <NVIC_EncodePriority+0x30>
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3b03      	subs	r3, #3
 8000a52:	e000      	b.n	8000a56 <NVIC_EncodePriority+0x32>
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43da      	mvns	r2, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	401a      	ands	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	43d9      	mvns	r1, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	4313      	orrs	r3, r2
         );
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3724      	adds	r7, #36	; 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a98:	d301      	bcc.n	8000a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00f      	b.n	8000abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <SysTick_Config+0x40>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f7ff ff90 	bl	80009d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff49 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af4:	f7ff ff5e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	6978      	ldr	r0, [r7, #20]
 8000b00:	f7ff ff90 	bl	8000a24 <NVIC_EncodePriority>
 8000b04:	4602      	mov	r2, r0
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff5f 	bl	80009d0 <__NVIC_SetPriority>
}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ffb0 	bl	8000a88 <SysTick_Config>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b42:	e16f      	b.n	8000e24 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 8161 	beq.w	8000e1e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d005      	beq.n	8000b74 <HAL_GPIO_Init+0x40>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d130      	bne.n	8000bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	2203      	movs	r2, #3
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000baa:	2201      	movs	r2, #1
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	f003 0201 	and.w	r2, r3, #1
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d017      	beq.n	8000c12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d123      	bne.n	8000c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	08da      	lsrs	r2, r3, #3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3208      	adds	r2, #8
 8000c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	220f      	movs	r2, #15
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f003 0307 	and.w	r3, r3, #7
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	08da      	lsrs	r2, r3, #3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3208      	adds	r2, #8
 8000c60:	6939      	ldr	r1, [r7, #16]
 8000c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0203 	and.w	r2, r3, #3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 80bb 	beq.w	8000e1e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	4b64      	ldr	r3, [pc, #400]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	4a63      	ldr	r2, [pc, #396]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb8:	4b61      	ldr	r3, [pc, #388]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc4:	4a5f      	ldr	r2, [pc, #380]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a57      	ldr	r2, [pc, #348]	; (8000e48 <HAL_GPIO_Init+0x314>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d031      	beq.n	8000d54 <HAL_GPIO_Init+0x220>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a56      	ldr	r2, [pc, #344]	; (8000e4c <HAL_GPIO_Init+0x318>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d02b      	beq.n	8000d50 <HAL_GPIO_Init+0x21c>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a55      	ldr	r2, [pc, #340]	; (8000e50 <HAL_GPIO_Init+0x31c>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d025      	beq.n	8000d4c <HAL_GPIO_Init+0x218>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a54      	ldr	r2, [pc, #336]	; (8000e54 <HAL_GPIO_Init+0x320>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d01f      	beq.n	8000d48 <HAL_GPIO_Init+0x214>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a53      	ldr	r2, [pc, #332]	; (8000e58 <HAL_GPIO_Init+0x324>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d019      	beq.n	8000d44 <HAL_GPIO_Init+0x210>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a52      	ldr	r2, [pc, #328]	; (8000e5c <HAL_GPIO_Init+0x328>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d013      	beq.n	8000d40 <HAL_GPIO_Init+0x20c>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a51      	ldr	r2, [pc, #324]	; (8000e60 <HAL_GPIO_Init+0x32c>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d00d      	beq.n	8000d3c <HAL_GPIO_Init+0x208>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a50      	ldr	r2, [pc, #320]	; (8000e64 <HAL_GPIO_Init+0x330>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d007      	beq.n	8000d38 <HAL_GPIO_Init+0x204>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a4f      	ldr	r2, [pc, #316]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d101      	bne.n	8000d34 <HAL_GPIO_Init+0x200>
 8000d30:	2308      	movs	r3, #8
 8000d32:	e010      	b.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d34:	2309      	movs	r3, #9
 8000d36:	e00e      	b.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d38:	2307      	movs	r3, #7
 8000d3a:	e00c      	b.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	e00a      	b.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d40:	2305      	movs	r3, #5
 8000d42:	e008      	b.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d44:	2304      	movs	r3, #4
 8000d46:	e006      	b.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e004      	b.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e002      	b.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d54:	2300      	movs	r3, #0
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	f002 0203 	and.w	r2, r2, #3
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	4093      	lsls	r3, r2
 8000d60:	461a      	mov	r2, r3
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d68:	4936      	ldr	r1, [pc, #216]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <HAL_GPIO_Init+0x338>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d9a:	4a34      	ldr	r2, [pc, #208]	; (8000e6c <HAL_GPIO_Init+0x338>)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da0:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <HAL_GPIO_Init+0x338>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dc4:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <HAL_GPIO_Init+0x338>)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <HAL_GPIO_Init+0x338>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dee:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <HAL_GPIO_Init+0x338>)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_GPIO_Init+0x338>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_GPIO_Init+0x338>)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f47f ae88 	bne.w	8000b44 <HAL_GPIO_Init+0x10>
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	371c      	adds	r7, #28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40013800 	.word	0x40013800
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40021400 	.word	0x40021400
 8000e60:	40021800 	.word	0x40021800
 8000e64:	40021c00 	.word	0x40021c00
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	40013c00 	.word	0x40013c00

08000e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e80:	787b      	ldrb	r3, [r7, #1]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e8c:	e003      	b.n	8000e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	041a      	lsls	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	619a      	str	r2, [r3, #24]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e23b      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d050      	beq.n	8000f60 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ebe:	4b9e      	ldr	r3, [pc, #632]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 030c 	and.w	r3, r3, #12
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d00c      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eca:	4b9b      	ldr	r3, [pc, #620]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ed2:	2b08      	cmp	r3, #8
 8000ed4:	d112      	bne.n	8000efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ed6:	4b98      	ldr	r3, [pc, #608]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ee2:	d10b      	bne.n	8000efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	4b94      	ldr	r3, [pc, #592]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d036      	beq.n	8000f5e <HAL_RCC_OscConfig+0xbe>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d132      	bne.n	8000f5e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e216      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	4b8e      	ldr	r3, [pc, #568]	; (800113c <HAL_RCC_OscConfig+0x29c>)
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d013      	beq.n	8000f36 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fd23 	bl	8000958 <HAL_GetTick>
 8000f12:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f16:	f7ff fd1f 	bl	8000958 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	; 0x64
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e200      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f28:	4b83      	ldr	r3, [pc, #524]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x76>
 8000f34:	e014      	b.n	8000f60 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f36:	f7ff fd0f 	bl	8000958 <HAL_GetTick>
 8000f3a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fd0b 	bl	8000958 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b64      	cmp	r3, #100	; 0x64
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e1ec      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f50:	4b79      	ldr	r3, [pc, #484]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f0      	bne.n	8000f3e <HAL_RCC_OscConfig+0x9e>
 8000f5c:	e000      	b.n	8000f60 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d077      	beq.n	800105c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f6c:	4b72      	ldr	r3, [pc, #456]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00b      	beq.n	8000f90 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f78:	4b6f      	ldr	r3, [pc, #444]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d126      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f84:	4b6c      	ldr	r3, [pc, #432]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d120      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f90:	4b69      	ldr	r3, [pc, #420]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x108>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d001      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e1c0      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa8:	4b63      	ldr	r3, [pc, #396]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	21f8      	movs	r1, #248	; 0xf8
 8000fb6:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	69b9      	ldr	r1, [r7, #24]
 8000fba:	fa91 f1a1 	rbit	r1, r1
 8000fbe:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fc0:	6979      	ldr	r1, [r7, #20]
 8000fc2:	fab1 f181 	clz	r1, r1
 8000fc6:	b2c9      	uxtb	r1, r1
 8000fc8:	408b      	lsls	r3, r1
 8000fca:	495b      	ldr	r1, [pc, #364]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd0:	e044      	b.n	800105c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d02a      	beq.n	8001030 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fda:	4b59      	ldr	r3, [pc, #356]	; (8001140 <HAL_RCC_OscConfig+0x2a0>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fcba 	bl	8000958 <HAL_GetTick>
 8000fe4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fcb6 	bl	8000958 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	6a3b      	ldr	r3, [r7, #32]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e197      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffa:	4b4f      	ldr	r3, [pc, #316]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f0      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001006:	4b4c      	ldr	r3, [pc, #304]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	21f8      	movs	r1, #248	; 0xf8
 8001014:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	6939      	ldr	r1, [r7, #16]
 8001018:	fa91 f1a1 	rbit	r1, r1
 800101c:	60f9      	str	r1, [r7, #12]
  return result;
 800101e:	68f9      	ldr	r1, [r7, #12]
 8001020:	fab1 f181 	clz	r1, r1
 8001024:	b2c9      	uxtb	r1, r1
 8001026:	408b      	lsls	r3, r1
 8001028:	4943      	ldr	r1, [pc, #268]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
 800102e:	e015      	b.n	800105c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <HAL_RCC_OscConfig+0x2a0>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff fc8f 	bl	8000958 <HAL_GetTick>
 800103a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800103e:	f7ff fc8b 	bl	8000958 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e16c      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001050:	4b39      	ldr	r3, [pc, #228]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f0      	bne.n	800103e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d030      	beq.n	80010ca <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d016      	beq.n	800109e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001070:	4b34      	ldr	r3, [pc, #208]	; (8001144 <HAL_RCC_OscConfig+0x2a4>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fc6f 	bl	8000958 <HAL_GetTick>
 800107a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800107e:	f7ff fc6b 	bl	8000958 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e14c      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 8001092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x1de>
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <HAL_RCC_OscConfig+0x2a4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a4:	f7ff fc58 	bl	8000958 <HAL_GetTick>
 80010a8:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc54 	bl	8000958 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e135      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 80010c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8087 	beq.w	80011e6 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d110      	bne.n	800110c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_RCC_OscConfig+0x298>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001106:	2301      	movs	r3, #1
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_RCC_OscConfig+0x2a8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <HAL_RCC_OscConfig+0x2a8>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001116:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_RCC_OscConfig+0x2a8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001120:	2b00      	cmp	r3, #0
 8001122:	d122      	bne.n	800116a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_RCC_OscConfig+0x2a8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_RCC_OscConfig+0x2a8>)
 800112a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001130:	f7ff fc12 	bl	8000958 <HAL_GetTick>
 8001134:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001136:	e012      	b.n	800115e <HAL_RCC_OscConfig+0x2be>
 8001138:	40023800 	.word	0x40023800
 800113c:	40023802 	.word	0x40023802
 8001140:	42470000 	.word	0x42470000
 8001144:	42470e80 	.word	0x42470e80
 8001148:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114c:	f7ff fc04 	bl	8000958 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e0e5      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115e:	4b75      	ldr	r3, [pc, #468]	; (8001334 <HAL_RCC_OscConfig+0x494>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	4b72      	ldr	r3, [pc, #456]	; (8001338 <HAL_RCC_OscConfig+0x498>)
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d015      	beq.n	80011a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117c:	f7ff fbec 	bl	8000958 <HAL_GetTick>
 8001180:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001182:	e00a      	b.n	800119a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001184:	f7ff fbe8 	bl	8000958 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e0c7      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119a:	4b68      	ldr	r3, [pc, #416]	; (800133c <HAL_RCC_OscConfig+0x49c>)
 800119c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0ee      	beq.n	8001184 <HAL_RCC_OscConfig+0x2e4>
 80011a6:	e014      	b.n	80011d2 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fbd6 	bl	8000958 <HAL_GetTick>
 80011ac:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b0:	f7ff fbd2 	bl	8000958 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80011be:	4293      	cmp	r3, r2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e0b1      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <HAL_RCC_OscConfig+0x49c>)
 80011c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1ee      	bne.n	80011b0 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d105      	bne.n	80011e6 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011da:	4b58      	ldr	r3, [pc, #352]	; (800133c <HAL_RCC_OscConfig+0x49c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a57      	ldr	r2, [pc, #348]	; (800133c <HAL_RCC_OscConfig+0x49c>)
 80011e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 809c 	beq.w	8001328 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011f0:	4b52      	ldr	r3, [pc, #328]	; (800133c <HAL_RCC_OscConfig+0x49c>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 030c 	and.w	r3, r3, #12
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d061      	beq.n	80012c0 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d146      	bne.n	8001292 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001204:	4b4e      	ldr	r3, [pc, #312]	; (8001340 <HAL_RCC_OscConfig+0x4a0>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff fba5 	bl	8000958 <HAL_GetTick>
 800120e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001212:	f7ff fba1 	bl	8000958 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b64      	cmp	r3, #100	; 0x64
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e082      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001224:	4b45      	ldr	r3, [pc, #276]	; (800133c <HAL_RCC_OscConfig+0x49c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f0      	bne.n	8001212 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001230:	4b42      	ldr	r3, [pc, #264]	; (800133c <HAL_RCC_OscConfig+0x49c>)
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_RCC_OscConfig+0x4a4>)
 8001236:	4013      	ands	r3, r2
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	69d1      	ldr	r1, [r2, #28]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6a12      	ldr	r2, [r2, #32]
 8001240:	4311      	orrs	r1, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001246:	0192      	lsls	r2, r2, #6
 8001248:	4311      	orrs	r1, r2
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800124e:	0612      	lsls	r2, r2, #24
 8001250:	4311      	orrs	r1, r2
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001256:	0852      	lsrs	r2, r2, #1
 8001258:	3a01      	subs	r2, #1
 800125a:	0412      	lsls	r2, r2, #16
 800125c:	430a      	orrs	r2, r1
 800125e:	4937      	ldr	r1, [pc, #220]	; (800133c <HAL_RCC_OscConfig+0x49c>)
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_RCC_OscConfig+0x4a0>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fb75 	bl	8000958 <HAL_GetTick>
 800126e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001272:	f7ff fb71 	bl	8000958 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b64      	cmp	r3, #100	; 0x64
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e052      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_RCC_OscConfig+0x49c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x3d2>
 8001290:	e04a      	b.n	8001328 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_RCC_OscConfig+0x4a0>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fb5e 	bl	8000958 <HAL_GetTick>
 800129c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a0:	f7ff fb5a 	bl	8000958 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e03b      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_RCC_OscConfig+0x49c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x400>
 80012be:	e033      	b.n	8001328 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e02e      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x49c>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d121      	bne.n	8001324 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d11a      	bne.n	8001324 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012f4:	4013      	ands	r3, r2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012fa:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d111      	bne.n	8001324 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	3b01      	subs	r3, #1
 800130e:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001310:	429a      	cmp	r2, r3
 8001312:	d107      	bne.n	8001324 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40007000 	.word	0x40007000
 8001338:	40023870 	.word	0x40023870
 800133c:	40023800 	.word	0x40023800
 8001340:	42470060 	.word	0x42470060
 8001344:	f0bc8000 	.word	0xf0bc8000

08001348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0d2      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d90c      	bls.n	8001384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136a:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b66      	ldr	r3, [pc, #408]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0be      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800139c:	4b5c      	ldr	r3, [pc, #368]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	4a5b      	ldr	r2, [pc, #364]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80013b4:	4b56      	ldr	r3, [pc, #344]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a55      	ldr	r2, [pc, #340]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c0:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4950      	ldr	r1, [pc, #320]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d040      	beq.n	8001460 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d115      	bne.n	800141e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e085      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fe:	4b44      	ldr	r3, [pc, #272]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e079      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	4b40      	ldr	r3, [pc, #256]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e071      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141e:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f023 0203 	bic.w	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4939      	ldr	r1, [pc, #228]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 800142c:	4313      	orrs	r3, r2
 800142e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001430:	f7ff fa92 	bl	8000958 <HAL_GetTick>
 8001434:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	e00a      	b.n	800144e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001438:	f7ff fa8e 	bl	8000958 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	; 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e059      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 020c 	and.w	r2, r3, #12
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	429a      	cmp	r2, r3
 800145e:	d1eb      	bne.n	8001438 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d20c      	bcs.n	8001488 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e03c      	b.n	8001502 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	491b      	ldr	r1, [pc, #108]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4913      	ldr	r1, [pc, #76]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80014c6:	f000 f82b 	bl	8001520 <HAL_RCC_GetSysClockFreq>
 80014ca:	4601      	mov	r1, r0
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d4:	22f0      	movs	r2, #240	; 0xf0
 80014d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	fa92 f2a2 	rbit	r2, r2
 80014de:	60fa      	str	r2, [r7, #12]
  return result;
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	fab2 f282 	clz	r2, r2
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	40d3      	lsrs	r3, r2
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_RCC_ClockConfig+0x1cc>)
 80014ec:	5cd3      	ldrb	r3, [r2, r3]
 80014ee:	fa21 f303 	lsr.w	r3, r1, r3
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_RCC_ClockConfig+0x1d0>)
 80014f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_ClockConfig+0x1d4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f9ea 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023c00 	.word	0x40023c00
 8001510:	40023800 	.word	0x40023800
 8001514:	08001fb4 	.word	0x08001fb4
 8001518:	20000000 	.word	0x20000000
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001524:	b090      	sub	sp, #64	; 0x40
 8001526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001530:	2300      	movs	r3, #0
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001538:	4b59      	ldr	r3, [pc, #356]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b08      	cmp	r3, #8
 8001542:	d00d      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0x40>
 8001544:	2b08      	cmp	r3, #8
 8001546:	f200 80a2 	bhi.w	800168e <HAL_RCC_GetSysClockFreq+0x16e>
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0x34>
 800154e:	2b04      	cmp	r3, #4
 8001550:	d003      	beq.n	800155a <HAL_RCC_GetSysClockFreq+0x3a>
 8001552:	e09c      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001558:	e09c      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800155a:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800155e:	e099      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001560:	4b4f      	ldr	r3, [pc, #316]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800156a:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d027      	beq.n	80015c6 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001576:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	099b      	lsrs	r3, r3, #6
 800157c:	2200      	movs	r2, #0
 800157e:	623b      	str	r3, [r7, #32]
 8001580:	627a      	str	r2, [r7, #36]	; 0x24
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001588:	2100      	movs	r1, #0
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800158c:	fb03 f201 	mul.w	r2, r3, r1
 8001590:	2300      	movs	r3, #0
 8001592:	fb00 f303 	mul.w	r3, r0, r3
 8001596:	4413      	add	r3, r2
 8001598:	4a43      	ldr	r2, [pc, #268]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800159a:	fba0 2102 	umull	r2, r1, r0, r2
 800159e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015a0:	62ba      	str	r2, [r7, #40]	; 0x28
 80015a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a4:	4413      	add	r3, r2
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015aa:	2200      	movs	r2, #0
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	61fa      	str	r2, [r7, #28]
 80015b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015b8:	f7fe fe04 	bl	80001c4 <__aeabi_uldivmod>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4613      	mov	r3, r2
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015c4:	e055      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c6:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	099b      	lsrs	r3, r3, #6
 80015cc:	2200      	movs	r2, #0
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	617a      	str	r2, [r7, #20]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015d8:	f04f 0b00 	mov.w	fp, #0
 80015dc:	4652      	mov	r2, sl
 80015de:	465b      	mov	r3, fp
 80015e0:	f04f 0000 	mov.w	r0, #0
 80015e4:	f04f 0100 	mov.w	r1, #0
 80015e8:	0159      	lsls	r1, r3, #5
 80015ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015ee:	0150      	lsls	r0, r2, #5
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	ebb2 080a 	subs.w	r8, r2, sl
 80015f8:	eb63 090b 	sbc.w	r9, r3, fp
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001608:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800160c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001610:	ebb2 0408 	subs.w	r4, r2, r8
 8001614:	eb63 0509 	sbc.w	r5, r3, r9
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	00eb      	lsls	r3, r5, #3
 8001622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001626:	00e2      	lsls	r2, r4, #3
 8001628:	4614      	mov	r4, r2
 800162a:	461d      	mov	r5, r3
 800162c:	eb14 030a 	adds.w	r3, r4, sl
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	eb45 030b 	adc.w	r3, r5, fp
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001644:	4629      	mov	r1, r5
 8001646:	028b      	lsls	r3, r1, #10
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	4604      	mov	r4, r0
 800164e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001652:	4601      	mov	r1, r0
 8001654:	028a      	lsls	r2, r1, #10
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165c:	2200      	movs	r2, #0
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	60fa      	str	r2, [r7, #12]
 8001662:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001666:	f7fe fdad 	bl	80001c4 <__aeabi_uldivmod>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4613      	mov	r3, r2
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	0c1b      	lsrs	r3, r3, #16
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	3301      	adds	r3, #1
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001682:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800168c:	e002      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001690:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001692:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001696:	4618      	mov	r0, r3
 8001698:	3740      	adds	r7, #64	; 0x40
 800169a:	46bd      	mov	sp, r7
 800169c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	00f42400 	.word	0x00f42400
 80016a8:	017d7840 	.word	0x017d7840

080016ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b0:	4b02      	ldr	r3, [pc, #8]	; (80016bc <HAL_RCC_GetHCLKFreq+0x10>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000000 	.word	0x20000000

080016c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80016c6:	f7ff fff1 	bl	80016ac <HAL_RCC_GetHCLKFreq>
 80016ca:	4601      	mov	r1, r0
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80016d4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80016d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	fa92 f2a2 	rbit	r2, r2
 80016e0:	603a      	str	r2, [r7, #0]
  return result;
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	fab2 f282 	clz	r2, r2
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	40d3      	lsrs	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_RCC_GetPCLK1Freq+0x40>)
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	08001fc4 	.word	0x08001fc4

08001704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800170a:	f7ff ffcf 	bl	80016ac <HAL_RCC_GetHCLKFreq>
 800170e:	4601      	mov	r1, r0
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001718:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800171c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	fa92 f2a2 	rbit	r2, r2
 8001724:	603a      	str	r2, [r7, #0]
  return result;
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	fab2 f282 	clz	r2, r2
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	40d3      	lsrs	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001732:	5cd3      	ldrb	r3, [r2, r3]
 8001734:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40023800 	.word	0x40023800
 8001744:	08001fc4 	.word	0x08001fc4

08001748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e041      	b.n	80017de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7fe ffd0 	bl	8000714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3304      	adds	r3, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4610      	mov	r0, r2
 8001788:	f000 f870 	bl	800186c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_TIM_SlaveConfigSynchro+0x18>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e031      	b.n	8001862 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f8d5 	bl	80019c0 <TIM_SlaveTimer_SetConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d009      	beq.n	8001830 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e018      	b.n	8001862 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800183e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800184e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a45      	ldr	r2, [pc, #276]	; (8001994 <TIM_Base_SetConfig+0x128>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d013      	beq.n	80018ac <TIM_Base_SetConfig+0x40>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188a:	d00f      	beq.n	80018ac <TIM_Base_SetConfig+0x40>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a42      	ldr	r2, [pc, #264]	; (8001998 <TIM_Base_SetConfig+0x12c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00b      	beq.n	80018ac <TIM_Base_SetConfig+0x40>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a41      	ldr	r2, [pc, #260]	; (800199c <TIM_Base_SetConfig+0x130>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d007      	beq.n	80018ac <TIM_Base_SetConfig+0x40>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a40      	ldr	r2, [pc, #256]	; (80019a0 <TIM_Base_SetConfig+0x134>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d003      	beq.n	80018ac <TIM_Base_SetConfig+0x40>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <TIM_Base_SetConfig+0x138>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d108      	bne.n	80018be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a34      	ldr	r2, [pc, #208]	; (8001994 <TIM_Base_SetConfig+0x128>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d02b      	beq.n	800191e <TIM_Base_SetConfig+0xb2>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d027      	beq.n	800191e <TIM_Base_SetConfig+0xb2>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a31      	ldr	r2, [pc, #196]	; (8001998 <TIM_Base_SetConfig+0x12c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d023      	beq.n	800191e <TIM_Base_SetConfig+0xb2>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a30      	ldr	r2, [pc, #192]	; (800199c <TIM_Base_SetConfig+0x130>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01f      	beq.n	800191e <TIM_Base_SetConfig+0xb2>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <TIM_Base_SetConfig+0x134>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01b      	beq.n	800191e <TIM_Base_SetConfig+0xb2>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <TIM_Base_SetConfig+0x138>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d017      	beq.n	800191e <TIM_Base_SetConfig+0xb2>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a2d      	ldr	r2, [pc, #180]	; (80019a8 <TIM_Base_SetConfig+0x13c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <TIM_Base_SetConfig+0xb2>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a2c      	ldr	r2, [pc, #176]	; (80019ac <TIM_Base_SetConfig+0x140>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00f      	beq.n	800191e <TIM_Base_SetConfig+0xb2>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a2b      	ldr	r2, [pc, #172]	; (80019b0 <TIM_Base_SetConfig+0x144>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00b      	beq.n	800191e <TIM_Base_SetConfig+0xb2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a2a      	ldr	r2, [pc, #168]	; (80019b4 <TIM_Base_SetConfig+0x148>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <TIM_Base_SetConfig+0xb2>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <TIM_Base_SetConfig+0x14c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d003      	beq.n	800191e <TIM_Base_SetConfig+0xb2>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a28      	ldr	r2, [pc, #160]	; (80019bc <TIM_Base_SetConfig+0x150>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d108      	bne.n	8001930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <TIM_Base_SetConfig+0x128>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d003      	beq.n	8001964 <TIM_Base_SetConfig+0xf8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <TIM_Base_SetConfig+0x138>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d103      	bne.n	800196c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b01      	cmp	r3, #1
 800197c:	d105      	bne.n	800198a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f023 0201 	bic.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]
  }
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40010000 	.word	0x40010000
 8001998:	40000400 	.word	0x40000400
 800199c:	40000800 	.word	0x40000800
 80019a0:	40000c00 	.word	0x40000c00
 80019a4:	40010400 	.word	0x40010400
 80019a8:	40014000 	.word	0x40014000
 80019ac:	40014400 	.word	0x40014400
 80019b0:	40014800 	.word	0x40014800
 80019b4:	40001800 	.word	0x40001800
 80019b8:	40001c00 	.word	0x40001c00
 80019bc:	40002000 	.word	0x40002000

080019c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f023 0307 	bic.w	r3, r3, #7
 80019ee:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b70      	cmp	r3, #112	; 0x70
 8001a08:	d01a      	beq.n	8001a40 <TIM_SlaveTimer_SetConfig+0x80>
 8001a0a:	2b70      	cmp	r3, #112	; 0x70
 8001a0c:	d860      	bhi.n	8001ad0 <TIM_SlaveTimer_SetConfig+0x110>
 8001a0e:	2b60      	cmp	r3, #96	; 0x60
 8001a10:	d054      	beq.n	8001abc <TIM_SlaveTimer_SetConfig+0xfc>
 8001a12:	2b60      	cmp	r3, #96	; 0x60
 8001a14:	d85c      	bhi.n	8001ad0 <TIM_SlaveTimer_SetConfig+0x110>
 8001a16:	2b50      	cmp	r3, #80	; 0x50
 8001a18:	d046      	beq.n	8001aa8 <TIM_SlaveTimer_SetConfig+0xe8>
 8001a1a:	2b50      	cmp	r3, #80	; 0x50
 8001a1c:	d858      	bhi.n	8001ad0 <TIM_SlaveTimer_SetConfig+0x110>
 8001a1e:	2b40      	cmp	r3, #64	; 0x40
 8001a20:	d019      	beq.n	8001a56 <TIM_SlaveTimer_SetConfig+0x96>
 8001a22:	2b40      	cmp	r3, #64	; 0x40
 8001a24:	d854      	bhi.n	8001ad0 <TIM_SlaveTimer_SetConfig+0x110>
 8001a26:	2b30      	cmp	r3, #48	; 0x30
 8001a28:	d055      	beq.n	8001ad6 <TIM_SlaveTimer_SetConfig+0x116>
 8001a2a:	2b30      	cmp	r3, #48	; 0x30
 8001a2c:	d850      	bhi.n	8001ad0 <TIM_SlaveTimer_SetConfig+0x110>
 8001a2e:	2b20      	cmp	r3, #32
 8001a30:	d051      	beq.n	8001ad6 <TIM_SlaveTimer_SetConfig+0x116>
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d84c      	bhi.n	8001ad0 <TIM_SlaveTimer_SetConfig+0x110>
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d04d      	beq.n	8001ad6 <TIM_SlaveTimer_SetConfig+0x116>
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d04b      	beq.n	8001ad6 <TIM_SlaveTimer_SetConfig+0x116>
 8001a3e:	e047      	b.n	8001ad0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8001a50:	f000 f8a4 	bl	8001b9c <TIM_ETR_SetConfig>
      break;
 8001a54:	e040      	b.n	8001ad8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d101      	bne.n	8001a62 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e03b      	b.n	8001ada <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6a1a      	ldr	r2, [r3, #32]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a88:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	621a      	str	r2, [r3, #32]
      break;
 8001aa6:	e017      	b.n	8001ad8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f000 f814 	bl	8001ae2 <TIM_TI1_ConfigInputStage>
      break;
 8001aba:	e00d      	b.n	8001ad8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f000 f838 	bl	8001b3e <TIM_TI2_ConfigInputStage>
      break;
 8001ace:	e003      	b.n	8001ad8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8001ad4:	e000      	b.n	8001ad8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8001ad6:	bf00      	nop
  }

  return status;
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b087      	sub	sp, #28
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	f023 0201 	bic.w	r2, r3, #1
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f023 030a 	bic.w	r3, r3, #10
 8001b1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	621a      	str	r2, [r3, #32]
}
 8001b34:	bf00      	nop
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b087      	sub	sp, #28
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f023 0210 	bic.w	r2, r3, #16
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	031b      	lsls	r3, r3, #12
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	621a      	str	r2, [r3, #32]
}
 8001b92:	bf00      	nop
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	021a      	lsls	r2, r3, #8
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	609a      	str	r2, [r3, #8]
}
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e05a      	b.n	8001caa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d022      	beq.n	8001c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c40:	d01d      	beq.n	8001c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d018      	beq.n	8001c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00e      	beq.n	8001c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d009      	beq.n	8001c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d004      	beq.n	8001c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10c      	bne.n	8001c98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	40000800 	.word	0x40000800
 8001cc0:	40000c00 	.word	0x40000c00
 8001cc4:	40010400 	.word	0x40010400
 8001cc8:	40014000 	.word	0x40014000
 8001ccc:	40001800 	.word	0x40001800

08001cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e042      	b.n	8001d68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7fe fd2a 	bl	8000750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2224      	movs	r2, #36	; 0x24
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f82b 	bl	8001d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001db0:	f023 030c 	bic.w	r3, r3, #12
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a57      	ldr	r2, [pc, #348]	; (8001f38 <UART_SetConfig+0x1c8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d004      	beq.n	8001de8 <UART_SetConfig+0x78>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a56      	ldr	r2, [pc, #344]	; (8001f3c <UART_SetConfig+0x1cc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d103      	bne.n	8001df0 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001de8:	f7ff fc8c 	bl	8001704 <HAL_RCC_GetPCLK2Freq>
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	e002      	b.n	8001df6 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001df0:	f7ff fc66 	bl	80016c0 <HAL_RCC_GetPCLK1Freq>
 8001df4:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dfe:	d14c      	bne.n	8001e9a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	441a      	add	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4a4a      	ldr	r2, [pc, #296]	; (8001f40 <UART_SetConfig+0x1d0>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	095b      	lsrs	r3, r3, #5
 8001e1e:	0119      	lsls	r1, r3, #4
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	009a      	lsls	r2, r3, #2
 8001e2a:	441a      	add	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e36:	4b42      	ldr	r3, [pc, #264]	; (8001f40 <UART_SetConfig+0x1d0>)
 8001e38:	fba3 0302 	umull	r0, r3, r3, r2
 8001e3c:	095b      	lsrs	r3, r3, #5
 8001e3e:	2064      	movs	r0, #100	; 0x64
 8001e40:	fb00 f303 	mul.w	r3, r0, r3
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	3332      	adds	r3, #50	; 0x32
 8001e4a:	4a3d      	ldr	r2, [pc, #244]	; (8001f40 <UART_SetConfig+0x1d0>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	095b      	lsrs	r3, r3, #5
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e58:	4419      	add	r1, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	009a      	lsls	r2, r3, #2
 8001e64:	441a      	add	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <UART_SetConfig+0x1d0>)
 8001e72:	fba3 0302 	umull	r0, r3, r3, r2
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2064      	movs	r0, #100	; 0x64
 8001e7a:	fb00 f303 	mul.w	r3, r0, r3
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	3332      	adds	r3, #50	; 0x32
 8001e84:	4a2e      	ldr	r2, [pc, #184]	; (8001f40 <UART_SetConfig+0x1d0>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	f003 0207 	and.w	r2, r3, #7
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	440a      	add	r2, r1
 8001e96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e98:	e04a      	b.n	8001f30 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009a      	lsls	r2, r3, #2
 8001ea4:	441a      	add	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb0:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <UART_SetConfig+0x1d0>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	0119      	lsls	r1, r3, #4
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009a      	lsls	r2, r3, #2
 8001ec4:	441a      	add	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <UART_SetConfig+0x1d0>)
 8001ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2064      	movs	r0, #100	; 0x64
 8001eda:	fb00 f303 	mul.w	r3, r0, r3
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	3332      	adds	r3, #50	; 0x32
 8001ee4:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <UART_SetConfig+0x1d0>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef0:	4419      	add	r1, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	009a      	lsls	r2, r3, #2
 8001efc:	441a      	add	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <UART_SetConfig+0x1d0>)
 8001f0a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2064      	movs	r0, #100	; 0x64
 8001f12:	fb00 f303 	mul.w	r3, r0, r3
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	3332      	adds	r3, #50	; 0x32
 8001f1c:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <UART_SetConfig+0x1d0>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	f003 020f 	and.w	r2, r3, #15
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	440a      	add	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40011000 	.word	0x40011000
 8001f3c:	40011400 	.word	0x40011400
 8001f40:	51eb851f 	.word	0x51eb851f

08001f44 <memset>:
 8001f44:	4603      	mov	r3, r0
 8001f46:	4402      	add	r2, r0
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <memset+0xa>
 8001f4c:	4770      	bx	lr
 8001f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f52:	e7f9      	b.n	8001f48 <memset+0x4>

08001f54 <__libc_init_array>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	2600      	movs	r6, #0
 8001f58:	4d0c      	ldr	r5, [pc, #48]	; (8001f8c <__libc_init_array+0x38>)
 8001f5a:	4c0d      	ldr	r4, [pc, #52]	; (8001f90 <__libc_init_array+0x3c>)
 8001f5c:	1b64      	subs	r4, r4, r5
 8001f5e:	10a4      	asrs	r4, r4, #2
 8001f60:	42a6      	cmp	r6, r4
 8001f62:	d109      	bne.n	8001f78 <__libc_init_array+0x24>
 8001f64:	f000 f81a 	bl	8001f9c <_init>
 8001f68:	2600      	movs	r6, #0
 8001f6a:	4d0a      	ldr	r5, [pc, #40]	; (8001f94 <__libc_init_array+0x40>)
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	; (8001f98 <__libc_init_array+0x44>)
 8001f6e:	1b64      	subs	r4, r4, r5
 8001f70:	10a4      	asrs	r4, r4, #2
 8001f72:	42a6      	cmp	r6, r4
 8001f74:	d105      	bne.n	8001f82 <__libc_init_array+0x2e>
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
 8001f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f7c:	4798      	blx	r3
 8001f7e:	3601      	adds	r6, #1
 8001f80:	e7ee      	b.n	8001f60 <__libc_init_array+0xc>
 8001f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f86:	4798      	blx	r3
 8001f88:	3601      	adds	r6, #1
 8001f8a:	e7f2      	b.n	8001f72 <__libc_init_array+0x1e>
 8001f8c:	08001fd4 	.word	0x08001fd4
 8001f90:	08001fd4 	.word	0x08001fd4
 8001f94:	08001fd4 	.word	0x08001fd4
 8001f98:	08001fd8 	.word	0x08001fd8

08001f9c <_init>:
 8001f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9e:	bf00      	nop
 8001fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa2:	bc08      	pop	{r3}
 8001fa4:	469e      	mov	lr, r3
 8001fa6:	4770      	bx	lr

08001fa8 <_fini>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	bf00      	nop
 8001fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fae:	bc08      	pop	{r3}
 8001fb0:	469e      	mov	lr, r3
 8001fb2:	4770      	bx	lr
